// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: conversation.sql

package db

import (
	"context"
	"time"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO "conversation" ("memberIdOne", "memberNameOne", "memberIdTwo", "memberNameTwo", "memberImageOne", "memberImageTwo", "createdAt")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, "memberIdOne", "memberNameOne", "memberIdTwo", "memberNameTwo", "memberImageOne", "memberImageTwo", "createdAt"
`

type CreateConversationParams struct {
	MemberIdOne    string    `db:"memberIdOne"`
	MemberNameOne  string    `db:"memberNameOne"`
	MemberIdTwo    string    `db:"memberIdTwo"`
	MemberNameTwo  string    `db:"memberNameTwo"`
	MemberImageOne string    `db:"memberImageOne"`
	MemberImageTwo string    `db:"memberImageTwo"`
	CreatedAt      time.Time `db:"createdAt"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation,
		arg.MemberIdOne,
		arg.MemberNameOne,
		arg.MemberIdTwo,
		arg.MemberNameTwo,
		arg.MemberImageOne,
		arg.MemberImageTwo,
		arg.CreatedAt,
	)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.MemberIdOne,
		&i.MemberNameOne,
		&i.MemberIdTwo,
		&i.MemberNameTwo,
		&i.MemberImageOne,
		&i.MemberImageTwo,
		&i.CreatedAt,
	)
	return i, err
}

const getConversationByMembers = `-- name: GetConversationByMembers :one
SELECT id, "memberIdOne", "memberNameOne", "memberIdTwo", "memberNameTwo", "memberImageOne", "memberImageTwo", "createdAt" FROM "conversation"
WHERE ("memberIdOne" = $1 AND "memberIdTwo" = $2)
   OR ("memberIdOne" = $2 AND "memberIdTwo" = $1)
`

type GetConversationByMembersParams struct {
	MemberIdOne string `db:"memberIdOne"`
	MemberIdTwo string `db:"memberIdTwo"`
}

func (q *Queries) GetConversationByMembers(ctx context.Context, arg GetConversationByMembersParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByMembers, arg.MemberIdOne, arg.MemberIdTwo)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.MemberIdOne,
		&i.MemberNameOne,
		&i.MemberIdTwo,
		&i.MemberNameTwo,
		&i.MemberImageOne,
		&i.MemberImageTwo,
		&i.CreatedAt,
	)
	return i, err
}

const getConversationsByMemberId = `-- name: GetConversationsByMemberId :many
SELECT id, "memberIdOne", "memberNameOne", "memberIdTwo", "memberNameTwo", "memberImageOne", "memberImageTwo", "createdAt" FROM "conversation"
WHERE "memberIdOne" = $1 OR "memberIdTwo" = $1
`

func (q *Queries) GetConversationsByMemberId(ctx context.Context, memberidone string) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, getConversationsByMemberId, memberidone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.MemberIdOne,
			&i.MemberNameOne,
			&i.MemberIdTwo,
			&i.MemberNameTwo,
			&i.MemberImageOne,
			&i.MemberImageTwo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversationMemberImage = `-- name: UpdateConversationMemberImage :exec
UPDATE "conversation"
SET "memberImageOne" = $2, "memberImageTwo" = $3
WHERE "id" = $1
`

type UpdateConversationMemberImageParams struct {
	ID             int64  `db:"id"`
	MemberImageOne string `db:"memberImageOne"`
	MemberImageTwo string `db:"memberImageTwo"`
}

func (q *Queries) UpdateConversationMemberImage(ctx context.Context, arg UpdateConversationMemberImageParams) error {
	_, err := q.db.ExecContext(ctx, updateConversationMemberImage, arg.ID, arg.MemberImageOne, arg.MemberImageTwo)
	return err
}

const updateConversationMemberName = `-- name: UpdateConversationMemberName :exec
UPDATE "conversation"
SET "memberNameOne" = $2, "memberNameTwo" = $3
WHERE "id" = $1
`

type UpdateConversationMemberNameParams struct {
	ID            int64  `db:"id"`
	MemberNameOne string `db:"memberNameOne"`
	MemberNameTwo string `db:"memberNameTwo"`
}

func (q *Queries) UpdateConversationMemberName(ctx context.Context, arg UpdateConversationMemberNameParams) error {
	_, err := q.db.ExecContext(ctx, updateConversationMemberName, arg.ID, arg.MemberNameOne, arg.MemberNameTwo)
	return err
}
