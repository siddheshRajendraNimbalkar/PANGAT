// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "group" ("groupId","userId")
VALUES ($1,$2)
RETURNING id, "groupId", "userId", "createdAt"
`

type CreateGroupParams struct {
	GroupId string `db:"groupId"`
	UserId  string `db:"userId"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupId, arg.UserId)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupId,
		&i.UserId,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupByGroupId = `-- name: GetGroupByGroupId :one
SELECT id, "groupId", "userId", "createdAt" FROM "group"
WHERE "groupId" = $1
`

func (q *Queries) GetGroupByGroupId(ctx context.Context, groupid string) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByGroupId, groupid)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupId,
		&i.UserId,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupById = `-- name: GetGroupById :one
SELECT id, "groupId", "userId", "createdAt" FROM "group"
WHERE "id" = $1
`

func (q *Queries) GetGroupById(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupById, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupId,
		&i.UserId,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupsByUserId = `-- name: GetGroupsByUserId :many
SELECT id, "groupId", "userId", "createdAt" FROM "group"
WHERE "userId" = $1
`

func (q *Queries) GetGroupsByUserId(ctx context.Context, userid string) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupId,
			&i.UserId,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
