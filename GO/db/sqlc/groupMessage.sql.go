// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groupMessage.sql

package db

import (
	"context"
	"database/sql"
)

const createGroupMessage = `-- name: CreateGroupMessage :one
INSERT INTO "groupMessage" ("content", "fileUrl", "memberId", "memberImage", "channelId", "groupId")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, "groupId", content, "fileUrl", "memberId", "memberImage", "channelId", deleted, "deletedAt", "createdAt", "updatedAt"
`

type CreateGroupMessageParams struct {
	Content     string         `db:"content"`
	FileUrl     sql.NullString `db:"fileUrl"`
	MemberId    string         `db:"memberId"`
	MemberImage string         `db:"memberImage"`
	ChannelId   string         `db:"channelId"`
	GroupId     string         `db:"groupId"`
}

func (q *Queries) CreateGroupMessage(ctx context.Context, arg CreateGroupMessageParams) (GroupMessage, error) {
	row := q.db.QueryRowContext(ctx, createGroupMessage,
		arg.Content,
		arg.FileUrl,
		arg.MemberId,
		arg.MemberImage,
		arg.ChannelId,
		arg.GroupId,
	)
	var i GroupMessage
	err := row.Scan(
		&i.ID,
		&i.GroupId,
		&i.Content,
		&i.FileUrl,
		&i.MemberId,
		&i.MemberImage,
		&i.ChannelId,
		&i.Deleted,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGroupMessagesByGroupId = `-- name: GetGroupMessagesByGroupId :many
SELECT id, "groupId", content, "fileUrl", "memberId", "memberImage", "channelId", deleted, "deletedAt", "createdAt", "updatedAt" FROM "groupMessage"
WHERE "groupId" = $1
`

func (q *Queries) GetGroupMessagesByGroupId(ctx context.Context, groupid string) ([]GroupMessage, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMessagesByGroupId, groupid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupMessage{}
	for rows.Next() {
		var i GroupMessage
		if err := rows.Scan(
			&i.ID,
			&i.GroupId,
			&i.Content,
			&i.FileUrl,
			&i.MemberId,
			&i.MemberImage,
			&i.ChannelId,
			&i.Deleted,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
